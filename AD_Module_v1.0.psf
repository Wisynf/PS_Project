<File version="3.2">
  <FileID>07173d48-2f09-4b62-aa85-f96fb0e37eeb</FileID>
  <LastExport>133354537964963666</LastExport>
    <Code><![CDATA[#Static variables
$ADModule_status = Get-WindowsFeature -Name RSAT-AD-Powershell | select Installed
$Base = 'ou=mppch.local,dc=opp,dc=local'
$office = 'ОПП'
$domaine = 'opp.local'
$email_domain = 'hyattpetrovskypark-hotel.ru'
$domain_mark = 'MPPCH'
$usr_filter = 'samaccountname -like "469*"'
$ConnUri = 'http://opp-exc.opp.local/PowerShell'


#Activate modules
if ($ADModule_status.installed) { $tbx_Summary.Text = "RSAT-AD-Powershell module already installed" }
else
{
	install-WindowsFeature -name RSAT-AD-Powershell
	$tbx_Summary.Text = "RSAT-AD-Powershell module has been installed"
}

$formActiveDirectoryModul_Load={

	
}

$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formActiveDirectoryModul.Close()
}

$aboutToolStripMenuItem_Click={
	#TODO: Place custom script here
	[System.Windows.Forms.MessageBox]::Show("Menu Application v1.0","Menu Application");
}

#region Control Helper Functions
function Show-NotifyIcon
{
<#
	.SYNOPSIS
		Displays a NotifyIcon's balloon tip message in the taskbar's notification area.
	
	.DESCRIPTION
		Displays a NotifyIcon's a balloon tip message in the taskbar's notification area.
		
	.PARAMETER NotifyIcon
     	The NotifyIcon control that will be displayed.
	
	.PARAMETER BalloonTipText
     	Sets the text to display in the balloon tip.
	
	.PARAMETER BalloonTipTitle
		Sets the Title to display in the balloon tip.
	
	.PARAMETER BalloonTipIcon	
		The icon to display in the ballon tip.
	
	.PARAMETER Timeout	
		The time the ToolTip Balloon will remain visible in milliseconds. 
		Default: 0 - Uses windows default.
#>
	 param(
	  [Parameter(Mandatory = $true, Position = 0)]
	  [ValidateNotNull()]
	  [System.Windows.Forms.NotifyIcon]$NotifyIcon,
	  [Parameter(Mandatory = $true, Position = 1)]
	  [ValidateNotNullOrEmpty()]
	  [String]$BalloonTipText,
	  [Parameter(Position = 2)]
	  [String]$BalloonTipTitle = '',
	  [Parameter(Position = 3)]
	  [System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
	  [Parameter(Position = 4)]
	  [int]$Timeout = 0
 	)
	
	if($null -eq $NotifyIcon.Icon)
	{
		#Set a Default Icon otherwise the balloon will not show
		$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
	}
	
	$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
}




function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}
#endregion

function Get-RandomPassword
{
	param (
		[Parameter(Mandatory)]
		[ValidateRange(4, [int]::MaxValue)]
		[int]$length,
		[int]$upper = 1,
		[int]$lower = 1,
		[int]$numeric = 1,
		[int]$special = 1
	)
	if ($upper + $lower + $numeric + $special -gt $length)
	{
		throw "number of upper/lower/numeric/special char must be lower or equal to length"
	}
	$uCharSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	$lCharSet = "abcdefghijklmnopqrstuvwxyz"
	$nCharSet = "0123456789"
	$sCharSet = "$&*!=()@"
	$charSet = ""
	if ($upper -gt 0) { $charSet += $uCharSet }
	if ($lower -gt 0) { $charSet += $lCharSet }
	if ($numeric -gt 0) { $charSet += $nCharSet }
	if ($special -gt 0) { $charSet += $sCharSet }
	
	$charSet = $charSet.ToCharArray()
	$rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
	$bytes = New-Object byte[]($length)
	$rng.GetBytes($bytes)
	
	$result = New-Object char[]($length)
	for ($i = 0; $i -lt $length; $i++)
	{
		$result[$i] = $charSet[$bytes[$i] % $charSet.Length]
	}
	$password = (-join $result)
	$valid = $true
	if ($upper -gt ($password.ToCharArray() | Where-Object { $_ -cin $uCharSet.ToCharArray() }).Count) { $valid = $false }
	if ($lower -gt ($password.ToCharArray() | Where-Object { $_ -cin $lCharSet.ToCharArray() }).Count) { $valid = $false }
	if ($numeric -gt ($password.ToCharArray() | Where-Object { $_ -cin $nCharSet.ToCharArray() }).Count) { $valid = $false }
	if ($special -gt ($password.ToCharArray() | Where-Object { $_ -cin $sCharSet.ToCharArray() }).Count) { $valid = $false }
	
	if (!$valid)
	{
		$password = Get-RandomPassword $length $upper $lower $numeric $special
	}
	return $password
}

$tbx_Fname_TextChanged = {
	#TODO: Place custom script here
	$tbx_Fname.Add_TextChanged({
			if ($this.Text -match '[^a-z A-Z]')
			{
				$cursorPos = $this.SelectionStart
				$this.Text = $this.Text -replace '[^a-z A-Z]', ''
				# move the cursor to the end of the text:
				$this.SelectionStart = $this.Text.Length
				
				# or leave the cursor where it was before the replace
				#$this.SelectionStart = $cursorPos - 1
				#$this.SelectionLength = 0
			}
		})
}

$tbx_Sname_TextChanged = {
	#TODO: Place custom script here
	$tbx_Sname.Add_TextChanged({
			if ($this.Text -match '[^a-z A-Z]')
			{
				$cursorPos = $this.SelectionStart
				$this.Text = $this.Text -replace '[^a-z A-Z]', ''
				# move the cursor to the end of the text:
				$this.SelectionStart = $this.Text.Length
				
				# or leave the cursor where it was before the replace
				#$this.SelectionStart = $cursorPos - 1
				#$this.SelectionLength = 0
			}
		})
}

$cobx_dep_KeyPress={
	#TODO: Place custom script here
	$cobx_dep.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
}

$tbx_title_TextChanged = {
	#TODO: Place custom script here
	$tbx_title.Add_TextChanged({
			if ($this.Text -match '[^a-z A-Z]')
			{
				$cursorPos = $this.SelectionStart
				$this.Text = $this.Text -replace '[^a-z A-Z]', ''
				# move the cursor to the end of the text:
				$this.SelectionStart = $this.Text.Length
				
				# or leave the cursor where it was before the replace
				#$this.SelectionStart = $cursorPos - 1
				#$this.SelectionLength = 0
			}
		}) 
}

$cbx_IndexChanged={
	#TODO: Place custom script here
	
}

$Btn_Create_Click = {
	
	$allusers = Get-ADUser -filter $usr_filter -SearchBase $Base -Properties mail,samaccountname 
	
	if ($tbx_Fname.Text -and $tbx_Sname.Text -and $cobx_dep.Text -and $tbx_title.Text -and $tbx_pwd.Text) {
		
		$sanlast = $allusers.samaccountname | Select-Object -Last 1
		
		$sannew = [int]$sanlast + 1
		
		if ($allusers.samaccountname -notcontains $sannew)
		{
			
			$userpn = "$($tbx_Fname.Text.ToLower()).$($tbx_Sname.Text.ToLower())@$domaine"
			$desc = "$($tbx_Sname.Text), $($tbx_Fname.Text) ($domain_mark)"
			$email = "$($tbx_Fname.Text.ToLower()).$($tbx_Sname.Text.ToLower())@$email_domain"
			$secure_passwd = (ConvertTo-SecureString $tbx_pwd.Text -AsPlainText -Force)
			
			try
			{
				
				New-ADUser -name $sannew -UserPrincipalName $userpn -Office $office -GivenName $tbx_Fname.Text -Surname $tbx_Sname.Text `
						   -Description $desc -DisplayName $desc -Title $tbx_title.Text -Department $cobx_dep.Text -Path $Base `
						   -EmailAddress $email -AccountPassword $secure_passwd -Enabled $True 
				
				
		$tbx_Summary.Text = @(
		"Пользователь $sannew создан
		Имя: $($tbx_Fname.text)
		Фамилия: $($tbx_Sname.text)
		Подразделение: $($cobx_dep.text)
		Должность: $($tbx_title.Text)
		Email: $email
		Новый пароль: $($tbx_pwd.Text)") -split "		"
				
			}
			catch { $tbx_Summary.Text = 'Учетная запись не имеет прав на создание пользователей'}
		
			
		}
		
		
	}
	
	else
	{
		$tbx_Summary.Text = "Заполните пожалуйста все поля"
	}
	
}

$labelrand_pwd_Click={
	
	$random_password = Get-RandomPassword 12 2 2 2 1
	#Set-Clipboard -Value $random_password
	$tbx_pwd.Text = $random_password
}

$tbx_pwd_TextChanged={
	#TODO: Place custom script here
	
}

$btn_print_Click={
	#TODO: Place custom script here
	$tbx_Summary.Text | out-printer -name "\\hc-ps\prn-hc-hp09"
}


#Future feautures 
<#	Exchange module
		if ($cbx_mailbox -eq "1" -and $Credentials)
		{

			$Session = New-PSSession -ConfigurationName Microsoft.Exchange `
									-ConnectionUri $ConnUri -Authentication Kerberos -Credential $Credentials
			
			$smtpmails = get-mailbox -Filter * | Select-Object -expandproperty emailaddresses | select-object smtpaddress
			
			
		} #>

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
